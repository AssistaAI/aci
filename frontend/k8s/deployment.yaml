apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-frontend
  namespace: ${NAMESPACE}
  labels:
    app: aci-frontend
spec:
  replicas: ${REPLICAS}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: aci-frontend
  template:
    metadata:
      labels:
        app: aci-frontend
    spec:
      imagePullSecrets:
        - name: assista-ai
      containers:
        - name: aci-frontend
          image: ${FULL_IMAGE_NAME}
          ports:
            - containerPort: 3000
              name: http
          # env:
          # - name: SERVER_HOST
          #   value: aci-postgres-rw.${NAMESPACE}.svc.cluster.local
          # - name: SERVER_DB_SCHEME
          #   value: postgresql+psycopg
          # # PostgreSQL credentials from CloudNative-PG generated secret
          # - name: SERVER_DB_USER
          #   valueFrom:
          #     secretKeyRef:
          #       name: aci-postgres-app
          #       key: username
          # - name: SERVER_DB_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name: aci-postgres-app
          #       key: password
          # - name: SERVER_DB_NAME
          #   valueFrom:
          #     secretKeyRef:
          #       name: aci-postgres-app
          #       key: dbname

          # - name: ALEMBIC_DB_SCHEME
          #   value: postgresql+psycopg

          # - name: ALEMBIC_DB_HOST
          #   value: aci-postgres-rw.${NAMESPACE}.svc.cluster.local
          # # PostgreSQL credentials from CloudNative-PG generated secret
          # - name: ALEMBIC_DB_USER
          #   valueFrom:
          #     secretKeyRef:
          #       name: aci-postgres-app
          #       key: username
          # - name: ALEMBIC_DB_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name: aci-postgres-app
          #       key: password
          # - name: ALEMBIC_DB_NAME
          #   valueFrom:
          #     secretKeyRef:
          #       name: aci-postgres-app
          #       key: dbname
          # Load all environment variables from existing secret
          # envFrom:
          # - secretRef:
          #     name: aci-frontend-${NAMESPACE}

          # Health checks - relaxed for stability
          # livenessProbe:
          #   httpGet:
          #     path: /ok
          #     port: 8000
          #   initialDelaySeconds: 120    # Mai mult timp să pornească
          #   periodSeconds: 30           # Verifică mai rar
          #   timeoutSeconds: 10          # Mai mult timp pentru răspuns
          #   failureThreshold: 5         # Mai multe încercări înainte să restart

          # readinessProbe:
          #   httpGet:
          #     path: /ok
          #     port: 8000
          #   initialDelaySeconds: 60
          #   periodSeconds: 10           # Mai rar
          #   timeoutSeconds: 5           # Mai mult timp
          #   failureThreshold: 3         # Mai multe încercări

          # # Resource limits - Guaranteed QoS for maximum stability
          # resources:
          #   requests:
          #     memory: "1Gi"             # Guaranteed memory allocation
          #     cpu: "0.5"                # Guaranteed CPU allocation
          #   limits:
          #     memory: "1Gi"             # Same as requests = Guaranteed QoS
          #     cpu: "0.5"                # Same as requests = Guaranteed QoS
